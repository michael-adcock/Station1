library(tidyverse)
library(RColorBrewer)
library(gtools)
# create dir if needed
plotsDir = "plots"
dir.create(file.path(plotsDir), showWarnings = FALSE)
# read in timepoints in correct order
dataDir = "../simulation_outputs"
timepoint_files <- grep("average_occupancy_timepoint", list.files(path = dataDir), value=TRUE)
timepoint_files <- mixedsort(unlist(timepoint_files))
timepoint_files <- paste(dataDir, timepoint_files, sep = "")
timepoints <- map(timepoint_files, function(x) read_csv(x, col_names = FALSE))
# read in timepoints in correct order
dataDir = "../simulation_outputs/"
timepoint_files <- grep("average_occupancy_timepoint", list.files(path = dataDir), value=TRUE)
timepoint_files <- mixedsort(unlist(timepoint_files))
timepoint_files <- paste(dataDir, timepoint_files, sep = "")
timepoints <- map(timepoint_files, function(x) read_csv(x, col_names = FALSE))
# Create .png files of timepoints
colours = brewer.pal(9,"YlOrRd")
png(file=paste(plotsDir, "/example%03d.png", sep = ""), width=300, heigh=300)
map(timepoints, function(df) heatmap(data.matrix(df), Colv = NA, Rowv = NA, col=colours, rev=TRUE))
dev.off()
# make gif using ImageMagick
#magickCommand <- paste("convert -delay 40",  plotsDir, "/*.png", plotsDir, "/occupancy_timepoints.gif", sep = "")
system("convert -delay 40 plots/*.png plots/occupancy_timepoints.gif")
# cleanup
file.remove(paste(plotsDir, "/", list.files(path = "plots", pattern=".png"), sep = ""))
# make gif using ImageMagick
magickCommand <- paste("convert -delay 40",  plotsDir, "/*.png", plotsDir, "/occupancy_timepoints.gif", sep = "")
# Create .png files of timepoints
colours = brewer.pal(9,"YlOrRd")
png(file=paste(plotsDir, "/example%03d.png", sep = ""), width=300, heigh=300)
map(timepoints, function(df) heatmap(data.matrix(df), Colv = NA, Rowv = NA, col=colours, rev=TRUE))
dev.off()
# make gif using ImageMagick
magickCommand <- paste("convert -delay 40",  plotsDir, "/*.png", plotsDir, "/occupancy_timepoints.gif", sep = "")
system(magickCommand)
# make gif using ImageMagick
magickCommand <- paste("convert -delay 40 ",  plotsDir, "/*.png", plotsDir, "/occupancy_timepoints.gif", sep = "")
system(magickCommand)
# make gif using ImageMagick
magickCommand <- paste("convert -delay 40 ",  plotsDir, "/*.png ", plotsDir, "/occupancy_timepoints.gif", sep = "")
system(magickCommand)
magickCommand
# make gif using ImageMagick
magickCommand <- paste("convert -delay 40 ",  plotsDir, "/*.png ", plotsDir, "/occupancy_timepoints.gif", sep = "")
magickCommand
# make gif using ImageMagick
magickCommand <- paste("convert -delay 40 ",  plotsDir, "/*.png ", plotsDir, "/occupancy_timepoints.gif", sep = "")
system(magickCommand)
#Windows
gsub("/", "\\", dataDir)
magickCommand <- paste("convert -delay 40 ",  plotsDir, "\\*.png ", plotsDir, "\\occupancy_timepoints.gif", sep = "")
#Windows
dataDir <- gsub("/", "\\", dataDir)
dataDir
#Windows
dataDir <- gsub("/", "\\\", dataDir)
#Windows
dataDir <- gsub("/", "\\\\", dataDir)
#Windows
dataDir
#Windows
dataDir <- gsub("/", "\\\\\\\\\", dataDir)
#Windows
dataDir <- gsub("/", "\\\\\\\\\\", dataDir)
dataDir
#Windows
#dataDir <- gsub("/", "\\", dataDir)
dataDir <- "..\\simulation_outputs\\"
magickCommand <- paste("convert -delay 40 ",  plotsDir, "\\*.png ", plotsDir, "\\occupancy_timepoints.gif", sep = "")
magickCommand
system(magickCommand)
shell(magickCommand)
# cleanup
file.remove(paste(plotsDir, "/", list.files(path = "plots", pattern=".png"), sep = ""))
# Now create total average heatmap
average_occupany <- read_csv(paste(dataDir, "average_occupancy.txt", sep = ""), col_names = FALSE)
pdf(paste(plotsDir, "/average_occupancy.pdf", sep = ""))
heatmap(data.matrix(average_occupany), Colv = NA, Rowv = NA, col=brewer.pal(9,"YlOrRd"), rev=TRUE)
dev.off()
library(tidyverse)
# Change this to your file
file_name <- "state_data1526897238626.txt"
x_axis <- 200
y_axis <- 100
states <- read_csv(paste("../simulation_outputs/", file_name, sep=""))
subset <- filter(states, x_pos >= 60 & x_pos <= 70 & y_pos >= 55 & y_pos <= 65)
static_plot <- function(df, step_choice) {
static <- filter(df, step==step_choice)
plot(static$x_pos, static$y_pos, xlim=c(0, x_axis), ylim=c(y_axis, 0), axes=F)
axis(1,at=seq(0,x_axis,10),tck=1)
axis(2,at=seq(0,y_axis,10),tck=1)
}
step_choice <- 1000
static_plot(states, step_choice)
static_plot(subset, step_choice)
x_axis <- 200
y_axis <- 100
subset <- filter(states, x_pos >= 60 & x_pos <= 70 & y_pos >= 55 & y_pos <= 65)
static_plot(states, step_choice)
static_plot(subset, step_choice)
step_choice <- 1000
static_plot(states, step_choice)
static_plot(subset, step_choice)
step_choice <- 500
static_plot(states, step_choice)
static_plot(subset, step_choice)
step_choice <- 800
static_plot(states, step_choice)
step_choice <- 100
static_plot(states, step_choice)
static_plot(subset, step_choice)
counts <- right_join(count(subset, step), tibble(step=seq(0, max(states$step))))
counts
counts[is.na(counts)] <- 0L
counts
subset
out <- count(subset, step)
out
write_csv(counts, "../counts.csv", col_names = FALSE)
# no zeoros
counts <- count(subset, step)
counts
write_csv(counts, "../counts.csv", col_names = FALSE)
counts <- filter(counts, step % 10 == 0)
counts <- filter(counts, ~step % 10 == 0)
10 % 10 == 0
10 % 10 == 0
counts <- filter(counts, (step %% 10) == 0)
counts <- filter(counts, step %% 10 == 0)
# no zeoros
counts <- count(subset, step)
counts <- filter(counts, step %% 10 == 0)
counts
nrows(counts)
nrow(counts)
write_csv(counts, "../counts.csv", col_names = FALSE)
# no zeoros
counts <- count(subset, step)
counts <- filter(counts, step %% 20 == 0)
counts
nrow(counts)
write_csv(counts, "../counts.csv", col_names = FALSE)
# no zeoros
counts <- count(subset, step)
counts
nrow(counts)
write_csv(counts, "../counts2.csv", col_names = FALSE)
#with zeroes
counts <- right_join(count(subset, step), tibble(step=seq(0, max(states$step))))
counts[is.na(counts)] <- 0L
counts
write_csv(counts, "../counts2.csv", col_names = FALSE)
write_csv(counts, "../counts2.csv", col_names = FALSE)
